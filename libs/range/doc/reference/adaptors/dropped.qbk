[/
    Copyright 2011 Akira Takahashi
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]
[section dropped]

`dropped` returns the suffix of the base range after the first `n` elements.

[table
    [[Syntax] [Code]]
    [[Pipe] [`rng | boost::adaptors::dropped(n)`]]
    [[Function] [`boost::adaptors::drop(rng, n)`]]
]

* [*Precondition:]  type of `n` is convertible to boost::range_difference<Range>::type. and 0 <= `n`.
* [*Throws:] no throw.
* [*Range Category:] __single_pass_range__
* [*Range Return Type:] ...
* [*Returned Range Category:] The minimum of the range category of `rng` and __bidirectional_range__

``
#include <boost/range/adaptor/dropped.hpp>
#include <boost/range/algorithm/for_each.hpp>
#include <boost/assign/list_of.hpp>
#include <iterator>
#include <iostream>
#include <vector>

void disp(int x) { std::cout << x << ' '; }

using namespace boost::adaptors;

int main()
{
    const std::vector<int> v = boost::assign::list_of(3)(1)(4)(2)(5);

    boost::for_each(v | dropped(2), disp);
}
``

This would produce the output:
``
4 2 5 
``
[endsect]

